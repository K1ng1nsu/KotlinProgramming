chap02-section2 -자료형{

변수의 선언 - val or var
- val(value) Read Only
    val username = "Insu"   // 자료형을 추론하여 String으로 결정
    val username: String = "Insu"

- var(variable) Read Write
}

ch02-sec4 - 연산자{
- 산술 +, -, *, /, %
- 대입 =, +=, -=, *=, /=, %=
- 증가 ++
- 감소 --
- 비교 <, =<, >, >=, ==, !=,  // ===, !== ((Kotlin only)
- 논리 &&, ||, !
- 비트연산자 shl(shift left), shr, ushr(unsigned right), and, or, xor, inv(inverse)
    4.shl(1) // 8


- 3항 연산자 - 없음 if(condition) a else b
- Elvis Operator :?  - 왼쪽이 null이면 오른쪽 리턴 아니면 왼쪽리면

}

ch03 - 함수, 함수형 프로그래밍

ch03-sec1 - 함수 선언, 호출{

}


ch03-sec2 - 함수형 프로그래밍{
 - 순수 함수
    a. 같은 인자에 대하여 항상 같은 값을 반환
    b. 함수 외부의 어떤 상태도 바꾸지 않는다.

 - 일급 객체 // 코틀린에서 함수는 1급 객체
    a. 함수의 인자로 전달할 수 있다.
    b. 함수의 반환값에 사용할 수 있다.
    c. 변수에 담을 수 있다.
}


ch03-sec3 - 고차함수와 람다식{
 - 고차 함수
    a. 일반 함수를 인자나 반환값으로 사용하는 함수
}


ch03-sec5 - 익명 함수, 인라인 함수, 확장 함수, 중위 함수, 재귀 함수{
 val add:(Int,Int)->Int = fun (a,b) = a+b
 val add2 = fun(a,b) = a+b
 val add3 = {x:Int,y:Int -> x+y}
 val result = add(10,2)
//

- 인라인 함수

함수가 호출되는 곳에 내용을 모두 복사
함수의 분기 없이 처리(함수 스택프레임 안만듬, 함수객체 생성안함) -> 성능 증가
- 성능상의 이유로 인라인 함수는 일반 함수에도 사용할 수 있으나,
  람다식을 매개 변수로 가진 함수에 사용할 것을 추천
- 코드가 복사되므로 내용이 많은 함수에 사용하면 코드가 늘어남 -> (스택 증가?)

inline fun sub(...) {
    abc
}

- noinline 키워드
    일부 람다식 함수를 인라인 되지 않게 하기 위해

inline fun sub(out1: () -> Unit, noinline out2: () -> Unit)

- crossinline 키워드
 non-local return 방지하기 위해서 씀




- 확장 함수
 기존의 표준 라이브러리를 수정하지 않고도 확장

fun main() {
    val source = "Hello World!"
    val target = "Kotlin"

    // String에 존재하지 않았던 함수를 추가했음
    println(source.getLongString(target))
}

fun String.getLongString(target:String):String =
    if (this.length > target.length) this else target


- 중위 함수(infix function)
    a. 멤버 메서드 또는 확장 함수여야 합니다.
    b. 하나의 매개변수를 가져야 합니다.
    c. infix 키워드를 사용하여 정의합니다.

- 중위 표현법(infix notation)
    a. 클래스의 멤버 호출 시 사용하는 점(.)을 생략하고 함수 이름 뒤에
       소괄호를 생략해 직관적인 이름을 사용할 수 있는 표현법

 fun main() {
     // 일반적인 표현법
     val multi = 3.multiply(10)

     // 중위 표현법
     val multi2 = 3 multiply 10
     println(multi)
     println(multi2)
 }

 infix fun Int.multiply(x:Int):Int{
     return this * x
 }

- 재귀 함수
    a. 무한 호출에 빠지지 않도록 탈출 조건을 만들어 둔다.(스택 오버플로됨)
    b. 스택 영역을 이용하므로 호출 횟수를 무리하게 많이 지정하지 않는다. (스택 오버플로됨)
    c. 재귀함수는 자기 자신을 계속 호출함

- tailrec 키워드를 사용해 꼬리 재귀함수를 선언
    a. 스택을 쌓아올리지 않고 내부적으로 while 조건문을 통해 계산을 함

}


ch03-sec3 - 함수와 함수의 범위{
}