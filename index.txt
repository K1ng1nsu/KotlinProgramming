chap02-section2 -자료형{

변수의 선언 - val or var
- val(value) Read Only
    val username = "Insu"   // 자료형을 추론하여 String으로 결정
    val username: String = "Insu"

- var(variable) Read Write
}

ch02-sec4 - 연산자{
- 산술 +, -, *, /, %
- 대입 =, +=, -=, *=, /=, %=
- 증가 ++
- 감소 --
- 비교 <, =<, >, >=, ==, !=,  // ===, !== ((Kotlin only)
- 논리 &&, ||, !
- 비트연산자 shl(shift left), shr, ushr(unsigned right), and, or, xor, inv(inverse)
    4.shl(1) // 8

- 범위 연산자 in

score in 80 .. 89


- 3항 연산자 - 없음 if(condition) a else b
- Elvis Operator :?  - 왼쪽이 null이면 오른쪽 리턴 아니면 왼쪽리면

}

ch03 - 함수, 함수형 프로그래밍

ch03-sec1 - 함수 선언, 호출{

}


ch03-sec2 - 함수형 프로그래밍{
 - 순수 함수
    a. 같은 인자에 대하여 항상 같은 값을 반환
    b. 함수 외부의 어떤 상태도 바꾸지 않는다.

 - 일급 객체 // 코틀린에서 함수는 1급 객체
    a. 함수의 인자로 전달할 수 있다.
    b. 함수의 반환값에 사용할 수 있다.
    c. 변수에 담을 수 있다.
}


ch03-sec3 - 고차함수와 람다식{
 - 고차 함수
    a. 일반 함수를 인자나 반환값으로 사용하는 함수
}


ch03-sec5 - 익명 함수, 인라인 함수, 확장 함수, 중위 함수, 재귀 함수{
 val add:(Int,Int)->Int = fun (a,b) = a+b
 val add2 = fun(a,b) = a+b
 val add3 = {x:Int,y:Int -> x+y}
 val result = add(10,2)
//

- 인라인 함수

함수가 호출되는 곳에 내용을 모두 복사
함수의 분기 없이 처리(함수 스택프레임 안만듬, 함수객체 생성안함) -> 성능 증가
- 성능상의 이유로 인라인 함수는 일반 함수에도 사용할 수 있으나,
  람다식을 매개 변수로 가진 함수에 사용할 것을 추천
- 코드가 복사되므로 내용이 많은 함수에 사용하면 코드가 늘어남 -> (스택 증가?)

inline fun sub(...) {
    abc
}

- noinline 키워드
    일부 람다식 함수를 인라인 되지 않게 하기 위해

inline fun sub(out1: () -> Unit, noinline out2: () -> Unit)

- crossinline 키워드
 non-local return 방지하기 위해서 씀




- 확장 함수
 기존의 표준 라이브러리를 수정하지 않고도 확장

fun main() {
    val source = "Hello World!"
    val target = "Kotlin"

    // String에 존재하지 않았던 함수를 추가했음
    println(source.getLongString(target))
}

fun String.getLongString(target:String):String =
    if (this.length > target.length) this else target


- 중위 함수(infix function)
    a. 멤버 메서드 또는 확장 함수여야 합니다.
    b. 하나의 매개변수를 가져야 합니다.
    c. infix 키워드를 사용하여 정의합니다.

- 중위 표현법(infix notation)
    a. 클래스의 멤버 호출 시 사용하는 점(.)을 생략하고 함수 이름 뒤에
       소괄호를 생략해 직관적인 이름을 사용할 수 있는 표현법

 fun main() {
     // 일반적인 표현법
     val multi = 3.multiply(10)

     // 중위 표현법
     val multi2 = 3 multiply 10
     println(multi)
     println(multi2)
 }

 infix fun Int.multiply(x:Int):Int{
     return this * x
 }

- 재귀 함수
    a. 무한 호출에 빠지지 않도록 탈출 조건을 만들어 둔다.(스택 오버플로됨)
    b. 스택 영역을 이용하므로 호출 횟수를 무리하게 많이 지정하지 않는다. (스택 오버플로됨)
    c. 재귀함수는 자기 자신을 계속 호출함

- tailrec 키워드를 사용해 꼬리 재귀함수를 선언
    a. 스택을 쌓아올리지 않고 내부적으로 while 조건문을 통해 계산을 함

}


ch03-sec3 - 함수와 함수의 범위{
}



ch04-sec1 - 조건문 if, when {
    if(condition){

    }else if() {

    }else {

    }

    val a = 12
    val b = 7

    val max = if(a>b){
        pln("a")
        a // return 됨
    }

    /////

    1. when with args
    2. when with no args

    when(인자) {
        값 혹은 표현식 -> 수행할 문장
        일치하는 범위 -> 수행할 문장
        else -> 수행할 문장
    }

    when(x){
        1 -> pln("x==1")
        2 -> pln("x==2")
        3,4,5 -> pln("x=3 or x=4 or x=5"
        parseInt(y) -> pln("x=y")
        in 1..10 -> pln("x in 1..10")
        !in 1..10 -> pln("1~10 은아님")
        is String -> "문자열임"

        else -> {
            pln("x는 1도 2도 아님")
        }
    }

    when{

    }



}

ch04-sec2 - 반복문 for, while, do-while {

downTo, step, until

    for(요소,변수 in 컬렉션, 범위) {

    }

    for( x in 0 .. 100 ){ // 앞에있는게 무조건 작아야함 100 .. 0 이렇게는 안됨
    x=0
    ...
    x=100

    }
    for( x in 0 until 100 ){
    x=0
    ...
    x=99
    }
    for( x in 5 downTo 1 ) {

    }

    for (x in 1 .. 100 step 2){

    }

    for( y in arr ){

    }



    ////

    while(condition){

    }


    ////
    do{

    }while(condition)



}


ch04-sec2 - 흐름의 중단과 반환 {
- return : 결괏값을 반환 or 지정된 라벨로 이동 // 람다식 내부에서 return을 쓸 경우에 non-local return을 주의해야함(crossinline, label, 익명함수 등으로 회피가능)
- break: for,while 하나 빠져나감 2개이상 빠져나가고싶으면 라벨사용
- continue


try-catch-finally

throw Exception(msg)

- 사용자 예외 정의

class <custom_exception_name>(message:String) :Exception(message)

}



chap05 - 클래스와 객체

chap05-sec1,sec2 클래스와 객체의 정의 {

- 생성자
    class 클래스명 constructor(args..){ // 주 생성자 위치
        constructor(){ // 부 생성자
        }
        constructor() { // 추가 부 생성자 / 생성자 오버로딩
        }
    }

    ㄱ. 주 생성자는 constructor 키워드 생략 가능 (가시성 지시자(접근제어자)나, 어노테이션이 없을 경우만)
    ㄴ. 객체를 생성할 때 new 키워드를 쓰지않음
    ㄷ.

- 초기화 블럭 init{}


}


  상속과 다형성 {

- open
    ㄱ. 상속하려면 클래스에 open 키워드가 있어야함
    ㄴ. 오버라이딩하려면 open 키워드가 있어야함, (오버라이딩 하는곳에서는 override 키워드를 써줘야함)
    ㄷ. 프로퍼티또한 open 과 override 키워드로 오버라이딩 가능

- final
    ㄱ. 자식클래스에서 메소드에 붙혀서 하위 클래스에서 오버라이드를 못하게 함

- inner
    ㄱ. 이너클래스 만들 때 씀
    ㄴ. 이너클래스에서 상위 클래스에 접근하고 싶은경우 super@<super_class_name> 으로 접근함

-

}


 인터페이스 {

- 인터페이스는 항상 open 임
- 인터페이스와 상위클래스의 메소드명이 같은 경우 super<super_class_name or interface_name>.theSameNameMethod() 로 호출
    super<A>.f(), super<B>.f()
- 구현은 class: interface 와 같이 함
-
}

 캡슐화 {

- 가시성 지시자(접근 지시자)
    ㄱ. private 외부에서 접근 불가
    ㄴ. public 어디서든 접근 가능(기본값)
    ㄷ. protected 외부에서 접근 불가능, 하위 상속 요소에서는 가능
    ㄹ. internal 같은 정의의 모듈 내부에서는 접근 가능
    ㅁ. 전역 변수, 함수, 클래스, 생성자, 프로퍼티, 메서드에 사용 가능

}

chap06 프로퍼티

section1 - 프로퍼티의 접근 {

val id:Int = _id
    get() = field
    set(value) {
        field = value
    }
}

section2 - 지연 초기화와 위임{

- lateinit
    ㄱ. Car 클래스의 초기화 부분에 Engine 클래스와 의존성을 가지는 경우, Engine 객체가 생성되지 않으면 완전하게 초기화 할 수 없는 경우
    ㄴ. 단위 테스트를 위해 임시적으로 객체를 생성 시켜야 하는 경우
    ㄷ. var로 선언된 프로퍼티만 가능
    ㄹ. 프로퍼티에 대한 게터와 세터를 사용할 수 없음
    ㅁ. 초기화 되지 않은 상태에서 접근하면 exception

- lazy
    ㄱ. 호출 시점에 by lazy{...} 정의에 의해 블록 부분의 초기화를 진행한다.
    ㄴ. val로 선언된 프로퍼티만 가능
    ㄷ. 객체 지연 초기화 가능

- by lazy의 모드
    ㄱ. SYNCHRONIZED(기본값) 락을 사용해 단일 스레드만이 사용하는 것을 보장
    ㄴ. PUBLICATION 여러 군데서 호출될 수 있으나 처음 초기화된 후 반환 값을 사용
    ㄷ. NONE 락을 사용하지 않기 때문에 빠르지만 다중 스레드가 접근할 수 있음(값의 일관성을 보장할 수 없음)

private val model by lazy (mode= LazyThreadSafetyMode.NONE){
    Injector.app().transactionModel()
}

- by를 통한 위임
    ㄱ. 코틀린의 기본 라이브러리는 open되지 않은 최종 클래스 -> 상속이나 직접 클래스의 기능 확장을 하기 어렵다.
    ㄴ. 위임을 통해 상속과 비슷하게 최종 클래스의 모든 기능을 사용하면서 동시에 기능을 추가 확장 구현할 수 있다.

- by lazy{...} 도 위임
    ㄱ. 사용된 프로퍼티는 람다식 함수에 전달되어(위임되어) 함수에 의해 사용
    ㄴ. lazy 람다식 함수는 람다를 전달받아 저장한 Lazy<T> 인스턴스를 반환한다.
    ㄷ. 최초 프포퍼티의 게터 실행은 lazy에 넘겨진 람다식 함수를 실행하고 결과를 기록한다.
    ㄹ. 이후 프로퍼티의 게터 실행은 이미 초기화되어 기록된 값을 반환한다.

- observable
    ㄱ. 프로퍼티를 감시하고 있다가 특정 코드의 로직에서 변경이 일어날 때 호출

- vetoable
    ㄱ. 감시보다는 수여한다는 의미로 반환값에 따라 프로퍼티 변경을 허용하거나 취소




}

section3 - 정적 변수와 메소드 {

- Companion Object
    ㄱ. 싱글톤으로 존재

- object 선언
    ㄱ. Singleton 으로 만들기 위해 그냥 class 키워드 대신 object 키워드로 만들면됨
    ㄴ. 생성자를 호출하지 않으므로 주/부 생성사를 사용할 수 없음.

- object 표현식
    ㄱ. object 선언과 달리 이름이 없으면 싱글턴이 아님
    ㄴ. object 표현식이 사용될 때 마다 새로우 인스턴스가 생성
    ㄷ. 이름이 없는 익명/내부 클래스로 불리는 형태를 object 표현식으로 만들 수 있다.(편리하게 만듬)


}


chap07 - 다양한 클래스와 인터페이스

section1 - 추상 클래스와 인터페이스 {

- abstract 키워드
    ㄱ. 추상클래스는 객체 생성 안됨
    ㄴ. open 키워드를 사용하지 않고도 파생 클래스 작성 가능

abstract class Vehicle{}


- interface
    ㄱ. 인터페이스에서는 프로퍼티에 값을 저장할 수 없지만 val로 선언된 프로퍼티는 게터를 통해 필요한 내용을 구현할 수 있다.


}



section2 - 데이터 클래스와 기타 클래스{

- data class
    ㄱ. toString(), equals(), hashCode(), copy(), component1() 메소드가 포함 되어있음
    ㄴ. 자바에서의 POJO 같은 클래스
    ㄷ. 부 생성자나 init 블록을 넣어 데이터를 위한 간단한 로직을 포함할 수 있음.

- 자동 생성되는 메소드들
    ㄱ. equals()
    ㄴ. hashCode()
    ㄷ. copy()
    ㄹ. toString()
    ㅁ. componentN() - 객체의 선언부 구조를 분해하기 위해 프로퍼티에 상응하는 메소드

data class Customer(var name:String, var email:String){
    var job:String = "Unknown"

    constructor(name:String, email:String, _job:String): this(name,email){
        job=_job
    }

   init{

   }
}


- 객체 destructuring
    val (name, email) = cus1    // JS의 객체 destructuring 와 비슷하다.
    val (_, email) = cus1    // 특정 프로퍼티를 제외하고 싶을 경우

    val name2 = cus1.component1()
    val email2 = cus2.component2()

    val customers = listOf(cus1,cus2,cus3)

    for((name,email) in customers){
        //
    }

    // 람다식에서의 사용
    val myLambda = {
        (nameLa,emailLa):Customer -> pln(nameLa); pln(emailLa)
    }
    myLambda(cus1)


- 자바의 내부 클래스 종류
    ㄱ. static class -> nested class 객체 생성 없이 사용 가능
    ㄴ. member class -> inner class 필드나 메소드와 연동하는 내부 클래스로 inner 키워드가 필요하다
    ㄷ. local class -> local class 클래스의 선언이 블록에 있다면 지역클래스이다.
    ㄹ. anonymous class -> object 표현식으로 대체

- 코틀린의 내부 클래스 종류
    ㄱ. nested class
    ㄴ. inner class

// 자바의 멤버 클래스

class A {
    ...
    class B{
        // 외부 클래스 A의 필드에 접근 가능
    }
}

// 코틀린의 이너 클래스 - inner class

class A {
    ...
    inner class B{ // 자바와 달리 inner 키워드 필요
        // 외부 클래스 A의 필드에 접근 가능
    }
}

// 자바의 정적 클래스 - static class
class A {
    ...
    static class B{ // 정적 클래스를 위해 static 키워드 사용
        ...
    }
}

// 정적 클래스처럼 사용한 코틀린의 중첩 클래스 - nested class
class A {
    ...
    class B{ // 코틀린에서는 아무 키워드가 없는 클래스는 중첩 클래스이며, 정적 클래스처럼 사용
            // 외부 클래스 A의 프로퍼티, 메소드에 접근할 수 없음 (코틀린의 중첩클래스는 자바의 멤버 클래스와 모양이 같음, 하지만 정적클래스 처럼 작동하기 때문에 접근 불가)
        ...
    }
}



- Sealed class
    ㄱ. 실드 클래스 그 자체로는 추상 클래스와 같기 때문에 객체를 만들 수는 없다.
    ㄴ. 생성자도 기본적으로는 private이며 private이 아닌 생성자는 허용하지 않음
    ㄷ. 실드 클래스는 같은 파일 안에서는 상속이 가능
    ㄹ. 블록 안에 선언되는 클래스는 상속이 필요한 경우 open 키워드로 선언


- Enum class
    ㄱ. 여러 개의 상수를 선언하고 열거된 값을 조건에 따라 선택할 수 있는 특수한 클래스
    ㄴ. 자료형이 동일한 상수를 나열할 수 있다.
        - 실드 클래스 처럼 다양한 자료형을 다루지 못한다.


- annotation class






}


section3 - 연산자 오버로딩{

    val a = 5
    val b = 10
    print(a.plus(b)) // print(a+b) 와 동일

    ㄱ. 연산자에 여러가지 다른 의미의 작동을 부여
    ㄴ. 코틀린에서는 특정 연산자의 역할을 함수로 정의
    ㄷ. operator 키워드를 사용해 정의

- operator

    ㄱ. plus (+)
    ㄴ. dec (--)
    ㄷ. operator fun 하고 자동완성하면 다 보임


    ㄹ. invoke operator

class Manager {
    operator fun invoke(value:String){
        pln(value)
    }

}

fun main {
    val manager = Manager()
    manager("Do something for me!") // manager.invoke("Do something ...") 이랑 같음


    val sum ={x:Int, y:Int -> x+y}
    sum.invoke(3,10)
    sum(3,10)

}





}











